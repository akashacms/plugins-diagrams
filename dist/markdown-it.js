import path from 'node:path';
import fs from 'node:fs';
import Murmur from './murmurhash3_gc.js';
/**
 * Add Mermaid support to Markdown-IT such that ```mermaid .. ``` will
 * in turn call the Mermaid CLI function `run` to render the Mermaid document.
 *
 * @param md
 * @param opts
 */
export function MarkdownITMermaidPlugin(md, opts) {
    if (typeof opts !== 'object') {
        throw new Error(`Options object required`);
    }
    if (typeof opts.fspath !== 'string') {
        throw new Error(`fspath required`);
    }
    if (typeof opts.prefix !== 'string') {
        throw new Error(`prefix required`);
    }
    const fspath = opts.fspath;
    const prefix = opts.prefix;
    // opts = Object.assign(MermaidPlugInDefaultOptions, opts);
    const defaultRenderer = md.renderer.rules.fence.bind(md.renderer.rules);
    md.renderer.rules.fence = (tokens, idx, opts, env, self) => {
        const token = tokens[idx];
        const code = token.content.trim();
        // console.log(`MermaidPlugin rules.fence ${token.info} ${code}`, opts);
        if (token.info.startsWith('mermaid')) {
            let title;
            const spc = token.info.indexOf(' ', 7);
            if (spc > 0) {
                title = token.info.slice(spc + 1);
            }
            const uniqueId = "render" + Murmur(code, 4242).toString();
            const mmdFileName = path.join(prefix, `${uniqueId}.mermaid`);
            const svgFileName = path.join(prefix, `${uniqueId}.svg`);
            fs.mkdirSync(path.join(fspath, path.dirname(mmdFileName)), {
                recursive: true
            });
            fs.writeFileSync(path.join(fspath, mmdFileName), code, 'utf8');
            return `<diagrams-mermaid
                        input-file='${mmdFileName}'
                        output-file='${svgFileName}'/>
            `;
        }
        return defaultRenderer(tokens, idx, opts, env, self);
    };
}
// MermaidPlugInDefaultOptions = {
//     startOnLoad: false,
//     securityLevel: 'true',
//     theme: "default",
//     flowchart:{
//         htmlLabels: false,
//         useMaxWidth: true,
//     }
// };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24taXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvbWFya2Rvd24taXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sV0FBVyxDQUFDO0FBRTdCLE9BQU8sRUFBRSxNQUFRLFNBQVMsQ0FBQztBQUMzQixPQUFPLE1BQU0sTUFBTSxxQkFBcUIsQ0FBQztBQXNCekM7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLHVCQUF1QixDQUFDLEVBQUUsRUFBRSxJQUEwQjtJQUVsRSxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRSxDQUFDO1FBQzNCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBQ0QsSUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssUUFBUSxFQUFFLENBQUM7UUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDRCxJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sS0FBSyxRQUFRLEVBQUUsQ0FBQztRQUNsQyxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUNELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDM0IsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUUzQiwyREFBMkQ7SUFFM0QsTUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXhFLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtRQUN2RCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNsQyx3RUFBd0U7UUFDeEUsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO1lBQ25DLElBQUksS0FBSyxDQUFDO1lBQ1YsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUNWLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDdEMsQ0FBQztZQUdELE1BQU0sUUFBUSxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRTFELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQ3pCLE1BQU0sRUFBRSxHQUFHLFFBQVEsVUFBVSxDQUNoQyxDQUFDO1lBQ0YsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FDekIsTUFBTSxFQUFFLEdBQUcsUUFBUSxNQUFNLENBQzVCLENBQUM7WUFFRixFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ2xCLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUNwQyxFQUFFO2dCQUNDLFNBQVMsRUFBRSxJQUFJO2FBQ2xCLENBQUMsQ0FBQztZQUNILEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FDdEIsTUFBTSxFQUFFLFdBQVcsQ0FDdEIsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFakIsT0FBTztzQ0FDbUIsV0FBVzt1Q0FDVixXQUFXO2FBQ3JDLENBQUM7UUFFTixDQUFDO1FBQ0QsT0FBTyxlQUFlLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3pELENBQUMsQ0FBQTtBQUNMLENBQUM7QUFHRCxrQ0FBa0M7QUFDbEMsMEJBQTBCO0FBQzFCLDZCQUE2QjtBQUM3Qix3QkFBd0I7QUFDeEIsa0JBQWtCO0FBQ2xCLDZCQUE2QjtBQUM3Qiw2QkFBNkI7QUFDN0IsUUFBUTtBQUNSLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdub2RlOnBhdGgnO1xuaW1wb3J0IHV0aWwgZnJvbSAnbm9kZTp1dGlsJztcbmltcG9ydCBmcyAgIGZyb20gJ25vZGU6ZnMnO1xuaW1wb3J0IE11cm11ciBmcm9tICcuL211cm11cmhhc2gzX2djLmpzJztcblxuZXhwb3J0IHR5cGUgTWVybWFpZFBsdWdpbk9wdGlvbnMgPSB7XG4gICAgLyoqXG4gICAgICogRmlsZS1zeXN0ZW0gcGF0aCBvZiBkaXJlY3Rvcnkgd2hlcmUgLm1lcm1haWQgZmlsZVxuICAgICAqIHdpbGwgbGFuZFxuICAgICAqL1xuICAgIGZzcGF0aDogc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogUHJlZml4IHN0cmluZyB0byB1c2Ugb24gZ2VuZXJhdGVkIGZpbGUgbmFtZXNcbiAgICAgKiBmb3IgLm1lcm1haWQgYW5kIC5zdmcgZmlsZXNcbiAgICAgKi9cbiAgICBwcmVmaXg6IHN0cmluZyxcblxuICAgIC8vIC4uLiBUaGVzZSBhcmUgZm9yIG1lcm1haWQtY2xpXG4gICAgLy8gVGhleSBhcmUgbm90IHlldCBzdXBwb3J0ZWRcbiAgICAvLyAgcHVwcGV0ZWVyQ29uZmlnPzogYW55LCAvLyBpbXBvcnQoXCJwdXBwZXRlZXJcIikuTGF1bmNoT3B0aW9ucyxcbiAgICAvLyAgb3V0cHV0Rm9ybWF0PzogXCJwbmdcIiB8IFwic3ZnXCIuXG4gICAgLy8gIGFydGVmYWN0cz86IHN0cmluZyAvLyAtIHBhdGggdG8gdGhlIGFydGVmYWN0cyBkaXJlY3RvcnksXG59O1xuXG4vKipcbiAqIEFkZCBNZXJtYWlkIHN1cHBvcnQgdG8gTWFya2Rvd24tSVQgc3VjaCB0aGF0IGBgYG1lcm1haWQgLi4gYGBgIHdpbGxcbiAqIGluIHR1cm4gY2FsbCB0aGUgTWVybWFpZCBDTEkgZnVuY3Rpb24gYHJ1bmAgdG8gcmVuZGVyIHRoZSBNZXJtYWlkIGRvY3VtZW50LlxuICogXG4gKiBAcGFyYW0gbWQgXG4gKiBAcGFyYW0gb3B0cyBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE1hcmtkb3duSVRNZXJtYWlkUGx1Z2luKG1kLCBvcHRzOiBNZXJtYWlkUGx1Z2luT3B0aW9ucykge1xuXG4gICAgaWYgKHR5cGVvZiBvcHRzICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE9wdGlvbnMgb2JqZWN0IHJlcXVpcmVkYCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0cy5mc3BhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZnNwYXRoIHJlcXVpcmVkYCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0cy5wcmVmaXggIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgcHJlZml4IHJlcXVpcmVkYCk7XG4gICAgfVxuICAgIGNvbnN0IGZzcGF0aCA9IG9wdHMuZnNwYXRoO1xuICAgIGNvbnN0IHByZWZpeCA9IG9wdHMucHJlZml4O1xuICAgIFxuICAgIC8vIG9wdHMgPSBPYmplY3QuYXNzaWduKE1lcm1haWRQbHVnSW5EZWZhdWx0T3B0aW9ucywgb3B0cyk7XG5cbiAgICBjb25zdCBkZWZhdWx0UmVuZGVyZXIgPSBtZC5yZW5kZXJlci5ydWxlcy5mZW5jZS5iaW5kKG1kLnJlbmRlcmVyLnJ1bGVzKTtcblxuICAgIG1kLnJlbmRlcmVyLnJ1bGVzLmZlbmNlID0gKHRva2VucywgaWR4LCBvcHRzLCBlbnYsIHNlbGYpID0+IHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSB0b2tlbnNbaWR4XTtcbiAgICAgICAgY29uc3QgY29kZSA9IHRva2VuLmNvbnRlbnQudHJpbSgpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhgTWVybWFpZFBsdWdpbiBydWxlcy5mZW5jZSAke3Rva2VuLmluZm99ICR7Y29kZX1gLCBvcHRzKTtcbiAgICAgICAgaWYgKHRva2VuLmluZm8uc3RhcnRzV2l0aCgnbWVybWFpZCcpKSB7XG4gICAgICAgICAgICBsZXQgdGl0bGU7XG4gICAgICAgICAgICBjb25zdCBzcGMgPSB0b2tlbi5pbmZvLmluZGV4T2YoJyAnLCA3KTtcbiAgICAgICAgICAgIGlmIChzcGMgPiAwKSB7XG4gICAgICAgICAgICAgICAgdGl0bGUgPSB0b2tlbi5pbmZvLnNsaWNlKHNwYyArIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIFxuICAgICAgICAgICAgY29uc3QgdW5pcXVlSWQgPSBcInJlbmRlclwiICsgTXVybXVyKGNvZGUsIDQyNDIpLnRvU3RyaW5nKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IG1tZEZpbGVOYW1lID0gcGF0aC5qb2luKFxuICAgICAgICAgICAgICAgIHByZWZpeCwgYCR7dW5pcXVlSWR9Lm1lcm1haWRgXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3Qgc3ZnRmlsZU5hbWUgPSBwYXRoLmpvaW4oXG4gICAgICAgICAgICAgICAgcHJlZml4LCBgJHt1bmlxdWVJZH0uc3ZnYFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgZnMubWtkaXJTeW5jKHBhdGguam9pbihcbiAgICAgICAgICAgICAgICBmc3BhdGgsIHBhdGguZGlybmFtZShtbWRGaWxlTmFtZSlcbiAgICAgICAgICAgICksIHtcbiAgICAgICAgICAgICAgICByZWN1cnNpdmU6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4oXG4gICAgICAgICAgICAgICAgZnNwYXRoLCBtbWRGaWxlTmFtZVxuICAgICAgICAgICAgKSwgY29kZSwgJ3V0ZjgnKTtcblxuICAgICAgICAgICAgcmV0dXJuIGA8ZGlhZ3JhbXMtbWVybWFpZFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQtZmlsZT0nJHttbWRGaWxlTmFtZX0nXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQtZmlsZT0nJHtzdmdGaWxlTmFtZX0nLz5cbiAgICAgICAgICAgIGA7XG5cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmYXVsdFJlbmRlcmVyKHRva2VucywgaWR4LCBvcHRzLCBlbnYsIHNlbGYpO1xuICAgIH1cbn1cblxuXG4vLyBNZXJtYWlkUGx1Z0luRGVmYXVsdE9wdGlvbnMgPSB7XG4vLyAgICAgc3RhcnRPbkxvYWQ6IGZhbHNlLFxuLy8gICAgIHNlY3VyaXR5TGV2ZWw6ICd0cnVlJyxcbi8vICAgICB0aGVtZTogXCJkZWZhdWx0XCIsXG4vLyAgICAgZmxvd2NoYXJ0Ontcbi8vICAgICAgICAgaHRtbExhYmVsczogZmFsc2UsXG4vLyAgICAgICAgIHVzZU1heFdpZHRoOiB0cnVlLFxuLy8gICAgIH1cbi8vIH07XG4iXX0=